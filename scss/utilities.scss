// Width Properties

.full-width { width: 100%; }
.half-width { width: 50%; }

.four-fifths-width { width: calc(100% * 4/5); }
.three-fifths-width { width: calc(100% * 3/5); }
.two-fifths-width { width: calc(100% * 2/5); }
.one-fifth-width { width: calc(100% * 1/5); }

.three-quarters-width { width: calc(100% * 3/4); }
.one-quarter-width { width: calc(100% * 1/4); }

.two-thirds-width { width: calc(100% * 2/3); }
.one-third-width { width: calc(100% * 1/3); }

// Flex Properties

.flex { display: flex; }

.flex-col { flex-direction: column; }

.flex-row { flex-direction: row; }

.flex-wrap { flex-wrap: wrap; }

.flex-no-wrap { flex-wrap: nowrap; }

.flex-grow-1 { flex-grow: 1; }

// Gap Properties
.gap-xxs {
  gap: var(--space-xxs);
  --gap: var(--space-xxs);
}
.gap-xs {
  gap: var(--space-xs);
  --gap: var(--space-xs);
}
.gap-sm {
  gap: var(--space-sm);
  --gap: var(--space-sm);
}
.gap-md {
  gap: var(--space-md);
  --gap: var(--space-md);
}
.gap-lg {
  gap: var(--space-lg);
  --gap: var(--space-lg);
}
.gap-xl {
  gap: var(--space-xl);
  --gap: var(--space-xl);
}

// Justify Content

.justify-start {
  justify-content: flex-start;
}

.justify-center {
  justify-content: center;
}

.justify-end {
  justify-content: flex-end;
}

.justify-between {
  justify-content: space-between;
}

.justify-around {
  justify-content: space-around;
}

// Align Items

.items-stretch {
  align-items: stretch;
}

.items-start {
  align-items: flex-start;
}

.items-center {
  align-items: center;
}

.items-end {
  align-items: flex-end;
}

.items-baseline {
  align-items: baseline;
}

.items-end {
  align-items: flex-end;
}

// Align Self

.self-auto {
  align-self: auto;
}

.self-start {
  align-self: flex-start;
}

.self-center {
  align-self: center;
}

.self-end {
  align-self: flex-end;
}

.self-stretch {
  align-self: stretch;
}

// Text Alignment

.text-left {
  text-align: left;
}

.text-center {
  text-align: center;
}

.text-right {
  text-align: right;
}

.text-justify {
  text-align: justify;
}

// Font size

.font-xxs { font-size: var(--text-xxs); }
.font-xs { font-size: var(--text-xs); }
.font-sm { font-size: var(--text-sm); }
.font-md { font-size: var(--text-md); }
.font-lg { font-size: var(--text-lg); }
.font-xl { font-size: var(--text-xl); }
.font-xxl { font-size: var(--text-xxl); }
.font-xxxl { font-size: var(--text-xxxl); }
.font-xxxxl { font-size: var(--text-xxxxl); }
.font-xxxxxl { font-size: var(--text-xxxxxl); }

// Box Margin

.margin-xl {
  margin: var(--space-xl);
}

.margin-lg {
  margin: var(--space-lg);
}

.margin-md {
  margin: var(--space-md);
}

.margin-sm {
  margin: var(--space-sm);
}

.margin-xs {
  margin: var(--space-xs);
}

.margin-none {
  margin: 0;
}

.margin-auto {
  margin: auto;
}

// Vertical Margin

.margin-y-xl {
  margin-top: var(--space-xl);
  margin-bottom: var(--space-xl);
}

.margin-y-lg {
  margin-top: var(--space-lg);
  margin-bottom: var(--space-lg);
}

.margin-y-md {
  margin-top: var(--space-md);
  margin-bottom: var(--space-md);
}

.margin-y-sm {
  margin-top: var(--space-sm);
  margin-bottom: var(--space-sm);
}

.margin-y-xs {
  margin-top: var(--space-xs);
  margin-bottom: var(--space-xs);
}

.margin-y-none {
  margin-top: 0;
  margin-bottom: 0;
}

// Horizontal Margin

.margin-x-xl {
  margin-right: var(--space-xl);
  margin-left: var(--space-xl);
}

.margin-x-lg {
  margin-right: var(--space-lg);
  margin-left: var(--space-lg);
}

.margin-x-md {
  margin-right: var(--space-md);
  margin-left: var(--space-md);
}

.margin-x-sm {
  margin-right: var(--space-sm);
  margin-left: var(--space-sm);
}

.margin-x-xs {
  margin-right: var(--space-xs);
  margin-left: var(--space-xs);
}

.margin-x-none {
  margin-right: 0;
  margin-left: 0;
}

// Top Margin

.margin-top-xl {
  margin-top: var(--space-xl);
}

.margin-top-lg {
  margin-top: var(--space-lg);
}

.margin-top-md {
  margin-top: var(--space-md);
}

.margin-top-sm {
  margin-top: var(--space-sm);
}

.margin-top-xs {
  margin-top: var(--space-xs);
}

.margin-top-none {
  margin-top: 0;
}

// Bottom Margin

.margin-bottom-xl {
  margin-bottom: var(--space-xl);
}

.margin-bottom-lg {
  margin-bottom: var(--space-lg);
}

.margin-bottom-md {
  margin-bottom: var(--space-md);
}

.margin-bottom-sm {
  margin-bottom: var(--space-sm);
}

.margin-bottom-xs {
  margin-bottom: var(--space-xs);
}

.margin-bottom-none {
  margin-bottom: 0;
}

// Right Margin

.margin-right-xl {
  margin-right: var(--space-xl);
}

.margin-right-lg {
  margin-right: var(--space-lg);
}

.margin-right-md {
  margin-right: var(--space-md);
}

.margin-right-sm {
  margin-right: var(--space-sm);
}

.margin-right-xs {
  margin-right: var(--space-xs);
}

.margin-right-none {
  margin-left: 0;
}

// Left Margin

.margin-left-xl {
  margin-left: var(--space-xl);
}

.margin-left-lg {
  margin-left: var(--space-lg);
}

.margin-left-md {
  margin-left: var(--space-md);
}

.margin-left-sm {
  margin-left: var(--space-sm);
}

.margin-left-xs {
  margin-left: var(--space-xs);
}

.margin-left-none {
  margin-left: 0;
}

// Elevations
.elevation-1 {
  box-shadow: var(--elevation-1);
}
.elevation-2 {
  box-shadow: var(--elevation-2);
}
.elevation-3 {
  box-shadow: var(--elevation-3);
}
.elevation-4 {
  box-shadow: var(--elevation-4);
}
.elevation-5 {
  box-shadow: var(--elevation-5);
}

// Layout properties
// Layout row evenly spaces all elements within it.
// It also makes it responsive at the sm breakpoint.
// If you combine it with flex-wrap, it tries to break using the
// normal flex wrap rules instead of responsively.

// E.G:
// .flex.layout-row
//   .card Item
//   .card Item
//   .card Item

// Normal width
// | Item | | Item | | Item |
// Mobile
// | Item |
// | Item |
// | Item |

// E.G:
// .flex.layout-row.flex-wrap
//   .card Item
//   .card Item

// Normal width
// | Item | | Item | | Item |
// Mobile (really small)
// | Item | | Item |
// |      Item     |
.layout-row {
  & > * {
    flex: 1;
  }

  @media screen and (max-width: $breakpoint-sm) {
    // Use flex wrapping strategy instead of responsive wrapping at sm breakpoint.
    &:not(.flex-wrap) {
      flex-direction: column;
    }
  }
}


// Flexible Layout
// This allows for creating a grid like area using one flex container with multiple lines
// Percentage based widths can be used to define the areas of each row.
// Note: This responsively breaks at $breakpoint-sm to a single column.
// You can add the .flex-no-wrap class to prevent that.
// This can also be combined with .gap-{size} to space items without having
// them wrap when you don't want them to.

// E.G
// | One Fifth | | One Fifth | | One Fifth | | One Fifth | | One Fifth |
// | One Quarter  | | One Quarter  | |  One Quarter  | |  One Quarter  |
// |      One Third      | |      One Third      | |     One Third     |
// |            One Half            | |            One Half            |
// |                              One Full                             |
// Mobile
// | Item |
// | Item |
// | Item |
// | Item |
// | Item |
// | Item |
// | Item |
// | Item |
// | Item |
// | Item |
// | Item |
// | Item |
// | Item |
// | Item |
// | Item |

// .flexible-layout-area can be nested in the item of another .flexible-layout-area
// for a more complex layout if needed. Gaps are not inherited and will need
// to be redefined at each level

.flexible-layout-area {
  display: flex;
  flex-wrap: wrap;

  & > * {
    flex: 1;

    &.four-fifths-width { flex-basis: calc(calc(100% * 4/5) - var(--gap)); }
    &.three-fifths-width { flex-basis: calc(calc(100% * 3/5) - var(--gap)); }
    &.two-fifths-width { flex-basis: calc(calc(100% * 2/5) - var(--gap)); }
    &.one-fifth-width { flex-basis: calc(calc(100% * 1/5) - var(--gap)); }

    &.three-quarters-width { flex-basis: calc(calc(100% * 3/4) - var(--gap)); }
    &.one-quarter-width { flex-basis: calc(calc(100% * 1/4) - var(--gap)); }

    &.two-thirds-width { flex-basis: calc(calc(100% * 2/3) - var(--gap)); }
    &.one-third-width { flex-basis: calc(calc(100% * 1/3) - var(--gap)); }

    &.full-width { flex-basis: calc(100% - var(--gap)); }
    &.half-width { flex-basis: calc(50% - var(--gap)); }
  }

  @media screen and (max-width: $breakpoint-sm) {
    &:not(.flex-no-wrap) {
      flex-direction: column;

      & > * {
        flex-basis: 100%;
        width: 100%;
      }
    }
  }
}
